#summary Quick tutorial on how to get started
#labels Featured

*Step 1. Get the code*<br>
You can get the binaries and latest source tree from the Downloads tab. The source is also available via _svn_ from the Source tab.

*Step 2. Determine hardware needs*<br>
If availability isn't a concern and your caching needs are small, you could run everything on one machine. At [http://www.shop.com SHOP.COM] we have lots of app servers and lots of cache servers. The cache servers are 64 bit Windows servers with 8GB of memory each.

*Step 3. Start cache server(s)*<br>
You'll find a bundled, runnable server JAR at `./ServerApplication/ShopCacheServer.jar`. To run it:
{{{
java <jvm options> -jar ShopCacheServer.jar -port <p> -path <d>
}}}
where `<p>` is the port to listen on and `<d>` is the path to a directory to
store DB files.

FYI - the ShopCacheServer source is valuable to look at for its use of the sccache APIs: http://code.google.com/p/sccache/source/browse/trunk/ServerApplication/src/ShopCacheServer.java

*Step 4. Configure client side*<br>
In your client application, you access the cache via the {{{SCCache}}} interface. Here's the code to get an instance:
{{{
SCClientFactory     clientFactory = ShopComCacheFactory.getClientFactory();
SCClientContext     context = clientFactory.newContext();
context.address(new InetSocketAddress(/*address*/, /*port number*/));
SCClientManager     manager = clientFactory.newClientManager(context);

myCache = new SCCache(manager);
}}}
If you have a farm of cache servers, create the {{{SCCache}}} instance this way:
{{{
List<SCClientManager> clientSet = new ArrayList<SCClientManager>();
SCClientFactory       clientFactory = ShopComCacheFactory.getClientFactory();

SCClientContext       context = clientFactory.newContext();
context.address(new InetSocketAddress(/*address 1*/, /*port number 1*/));
SCClientManager       manager = clientFactory.newClientManager(context);
clientSet.add(manager);

// add additional managers for each cache server

myCache = new SCCache(new SCMultiManager(clientSet));
}}}

*Step 5. Use the cache in your code*<br>
This is the standard code for caching objects:
{{{
// see if your object is in the cache
MyObject    obj = (MyObject)myCache.get(new SCDataBlock(myKey));

// if it's not, allocate it and add it to the cache
if ( obj == null )
{
    obj = new MyObject();
    myCache.put(new SCDataBlock(myKey, obj));
}
}}}