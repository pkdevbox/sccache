#summary How to build SHOP.COM Cache from the sources

= Introduction =

SHOP.COM Cache is self-contained and can be easily compiled using any build system you like or from the command line using `javac`. The source is distributed as a several modules that can be compiled into separate JARs. If you prefer, though, you can compile everything into one JAR.

= Modules =

Because of internal dependencies, the source should be built in the following steps:

 # Build the `chunked` module. It's used by nearly every other module.
 # Build the `generic_io` module with `chunked` in the CLASSPATH.
 # Build the `api` module with `chunked` in the CLASSPATH.

The above constitute the API portion of SHOP.COM cache. If you are using a custom implementation you can stop here. To build the default implementation:

 # Build the `ccdb2` module with `chunked` in the CLASSPATH.
 # Build the `common` module with `api` in the CLASSPATH.
 # Build the `storage` module with `chunked`, `ccdb2` and `api` in the CLASSPATH.
 # Build the `client` module with `chunked`, `generic_io`, `common` and `api` in the CLASSPATH.
 # Build the `server` module with `chunked`, `generic_io`, `common` and `api` in the CLASSPATH.

= Dependencies =
Here is a summary of the dependencies:

|| *Module* || *Directory* || *Dependencies* ||
|| chunked || _sccache_/source/utilities/chunked || _none_ ||
|| generic_io || _sccache_/source/utilities/generic_io || chunked ||
|| ccdb2 || _sccache_/source/utilities/ccdb2 || chunked ||
|| api || _sccache_/source/api || chunked ||
|| common || _sccache_/source/implementation/common || api ||
|| storage || _sccache_/source/implementation/storage || chunked, ccdb2, api ||
|| client || _sccache_/source/implementation/client || chunked, generic_io, common, api ||
|| server || _sccache_/source/implementation/server || chunked, generic_io, common, api ||

= Compiling Modules =

*chunked*<br>
cd source/utilities/chunked/classes/com/shop/util/chunked/src<br>
javac -d ../classes ./com/shop/util/chunked/`*`.java